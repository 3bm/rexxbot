###
CHERRYBITCH Slope Bot  v3.01
"Rides Green Dildos, Never Bleeds"

*easy adjustability*
*tune for any pair, candle size, or market*
*basic noob tune to illustrate functionality*


by request for user "cherrybitch"


January 20th, 2014
**************************************************************************************

Donations Appreciated!!!

LTC: LhqNNDa76NcEf7EWQVmDTeoy3MiENhpAJv
BTC: 1HAzXcrWcD4vxQ7kefESgj6PjqmGUQ5PdH


much thanks,

litepresence

**************************************************************************************
###


#@ema_previous Module by Ken
class Functions
  @ema_previous: (data, period) ->
    results = talib.EMA
      inReal: data
      startIdx: 0
      endIdx: data.length - 2
      optInTimePeriod: period
    _.last(results)   
init: (context) ->
#DON'T MESS w/ this part
#@ema_previous Module by Ken





#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# USER CONTROL PANEL
    
    # Buying Slope
    context.BUY_min  = 0.01    #Start buying over this slope   
    #context.BUY_max  = 0.5    #Stop buying at this slope
    # Selling Slope
    context.SELL_max = -0.05   #Start selling under this slope
    #context.SELL_min = -0.6   #Stop selling at this slope
    # Bull / Bear Sensitivity
    context.LONG        = 250   #Long EMA value (MAX = 250)   
    context.sensitivity = 0.5   #0 value = no sense /  1 = 50/50 w/ primary
    # Primary EMA
    context.EMA     = 40     #Slope EMA; EMA(5) for 2h
    # % above and below Limit EMA to buy and sell
    #context.B_limit = 1      #1.002 for more consistant orders
    #context.S_limit = 1      #0.998 for more consistant orders
    #context.EMA_L   = 4      #Order Limit EMA; EMA(2) for 2h
    # Minimum balance and buy/sell quantities
    # may use "null" for any of these
    # context.bal_min = 2  # if balance < this; sell all market order
    # context.B = 0.5      # buy this many units per candle  
    # context.S = 1        # sell this many units per candle
    # number of seconds order stays on books
    # context.timeout = 7199      
    
# /USER CONTROL PANEL
#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

        
###

INSPIRATION:

BTCE BTCUSD 2h
2013-11-01 11:25 Simulation started. 
Balance: 5000.00 USD
2014-01-18 15:00 Simulation completed. 
Balance: 135.57352 BTC 
($110,085.70 USD)


BTCE LTCUSD 2h
2013-11-01 11:25 Simulation started. 
Balance: 5000.00 USD
2014-01-18 15:00 Simulation completed. 
Balance: 19082.81 LTC 
($449,375.33 USD)


Properly tuned... this bot is bitchin'

rpfpresence@gmail.com for custom tuning



btce trollbox litepresence
"presence" ronpaulforums.com
@oraclepresence twitter
cryptocat chatroom: "cryptotrader" litepresence
###











###
<<<<   DON'T MESS WITH ANYTHING BELOW HERE   >>>>
###






# PERFORM EACH TICK    
handle: (context, data)->
    instrument = data.instruments[0]
    EMA_LAST = Functions.ema_previous(instrument.close,context.EMA)    
    EMA = 1*instrument.ema(context.EMA)
    #LIMIT = 1*instrument.ema(context.EMA_L)
    LONG_LAST = Functions.ema_previous(instrument.close,context.LONG) 
    LONG = 1*instrument.ema(context.LONG)
    SLOPE_L = LONG - LONG_LAST
    #balance = portfolio.positions[instrument.asset()].amount
    MARKET = SLOPE_L * context.sensitivity
    SLOPE = (EMA - EMA_LAST + MARKET) / (1 + context.sensitivity)
# DRAW
    plot 
        EMA: EMA
        #LIMIT: LIMIT
        LONG: LONG
# LOG        
    debug 'slope: ' + (Math.round(SLOPE*1000)/1000) + '  long: ' + (Math.round(SLOPE_L*1000)/1000)  
# LOGIC
    if SLOPE > context.BUY_min #and SLOPE < context.BUY_max
        buy instrument #(instrument,context.B,(Math.round(context.B_limit*LIMIT*1000))/1000,context.timeout)
    if SLOPE < context.SELL_max #and SLOPE > context.SELL_min
        sell instrument #(instrument,context.S,(Math.round(context.S_limit*LIMIT*1000))/1000,context.timeout)
    #if SLOPE < context.SELL_max and SLOPE > context.SELL_min and balance < context.bal_min      
     #   sell instrument
        
        
# Without the user control panel referencing, spacing, and comments
# this bot squeezes down to about 30 lines of code
#
# Good luck my friends!
